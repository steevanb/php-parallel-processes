#!/usr/bin/env bash

set -eu

readonly rootDir="$(realpath "$(dirname "$(realpath "$0")")/../..")"

if type docker > /dev/null 2>&1; then
    docker \
        run \
            -it \
            --rm \
            --volume "${rootDir}":/app \
            --entrypoint bin/ci/"$(basename "${0}")" \
            --workdir /app \
            steevanb/php-parallel-process:ci \
            "${@}"
    exit 0
fi

readonly version="${1}"
readonly gitBranch="release-${version}"
readonly logFilePath="${rootDir}/var/ci"
readonly logFilename="${logFilePath}/prepare-release.log"

function onError() {
    if [ -f "${logFilename}" ]; then
        cat "${logFilename}"
    fi

    echo -e "\e[41m Error. \e[0m"
}

trap onError ERR

function init-log() {
    if [ ! -d "${logFilePath}" ]; then
        mkdir -p "${logFilePath}"
    fi

    if [ -f "${logFilename}" ]; then
        rm "${logFilename}"
    fi
}

function edit-readme() {
    trap onError ERR

    echo "Edit README.md"

    readonly releaseBadge="[![version](https:\/\/img.shields.io\/badge\/version-${version}-success.svg)](https:\/\/github.com\/steevanb\/php-typed-array\/tree\/${version})"
    sed -i "1s/.*/${releaseBadge}/" "${rootDir}"/README.md

    readonly coverageBadge="![Code coverage](https:\/\/github.com\/steevanb\/php-parallel-processes\/releases\/download\/${version}\/coverage.png)"
    sed -i "6s/.*/${coverageBadge}/" "${rootDir}"/README.md

    readonly scrutinizerBadge="[![Scrutinizer](https:\/\/scrutinizer-ci.com\/g\/steevanb\/php-parallel-processes\/badges\/quality-score.png?t=${version})](https:\/\/scrutinizer-ci.com\/g\/steevanb\/php-parallel-processes)"
    sed -i "7s/.*/${scrutinizerBadge}/" "${rootDir}"/README.md

    readonly codeLines=$("${rootDir}"/bin/ci/code-lines)
    readonly codeLinesBadge="![Lines](https:\/\/img.shields.io\/badge\/code%20lines-${codeLines}-success.svg)"
    sed -i "3s/.*/${codeLinesBadge}/" "${rootDir}"/README.md
}

function git-release-branch() {
    trap onError ERR

    readonly currentGitBranch=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/' -e 's/(//g' -e 's/)//g')

#    if [ "${currentGitBranch}" != "" ] && [ "${currentGitBranch}" != "master" ]; then
#        echo -e "\e[41m Current branch is \"${currentGitBranch}\" but it shoud be \"master\". \e[0m"
#        exit 1
#    fi

    # On GitHub actions there is no current branch, do not update it
    if [ "${currentGitBranch}" != "" ]; then
        echo "Update local code"
        git fetch >> "${logFilename}" 2>&1
        git rebase -p origin/master >> "${logFilename}" 2>&1
    fi
}

function create-pull-request() {
    trap onError ERR

    echo "Create pull request"
    git add . >> "${logFilename}" 2>&1
    git commit -m "Release ${version}" >> "${logFilename}" 2>&1
    git push origin "${gitBranch}" >> "${logFilename}" 2>&1

    echo " > Go to https://github.com/steevanb/php-parallel-processes/pull/new/${gitBranch}."
}

init-log
#git-release-branch
edit-readme

#create-pull-request
